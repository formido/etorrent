Haphazard TODO list of things that needs attention:

* DONE Warn if we get old ACKs, there seem to be no control of this.
   We better have a check for this, otherwise we can simply add a
   large number of dumb errors to the code base later on.
* DONE We don't update the advertized window at all.
   We should begin planning how to handle the advertised window. We
   are currently killing the receiver because we are sending too fast
   and he has begun dropping packets.

   To make the window going:
   DONE ; Whenever we send out a packet, calculate the current window and
     stamp it into the packet
   DONE ; Figure out how to set the advertised window on outgoing packets.
   DONE ; Set window on outgoing advertised packets.

   DONE ; Figure out how to do this.
     It requires us to make a calculation based on the advertised
     window from the other end. When this is properly updated, we must
     calculate how many packets there are currently fitting into the
     window, and only send this amount to the other end.

   DONE ; When the connection is establishes, we will get an advertized
     window from the other end which we must obey. We don't currently.
   DONE ; When we receive a packet, be sure to make the correct window
     updates
   DONE ; When the packet fill code runs, we are currently shoving empty
     packets into the stream. This ought to be fixed - quickly.

   DONE ; Check that the window gets advertised correctly towards the other
     end.
   DONE ; Only send packets up to the window size.
  
   DONE ; Handle the special case of a zero packet window. It is a quite
     important special-case because you should only open up the window
     again, if a full packet can be injected in-flight. Otherwise, you
     must let the other end keep processing stuff.

   DONE ; Should ST_STATE packets bump the seq_no?

* DONE Figure out why our test fails
  The 2nd of our tests fail for some reason, but we need to know why
  exactly.

  Out test fails due to retransmissions it seems. We can thus try to
  implement retransmissions and see if this solves the problem!
* DONE Retransmissions
  How should we handle retransmission of missing packets? This is
  needed before we can go to a check over the internet.
** DONE Propagate information if the ACK is moving ahead!
** DONE Set up a retransmission timer with a fairly large window of 3 seconds.
*** DONE Detect the need for retransmissions
    What are exactly the need for retransmissions?

    You should detect the case where there are no more bytes in-flight
    to send out. In that case, you should mark a message down with
    this information.
*** DONE Mark in the ACK-code when the in-flight buffer is empty
*** DONE Set up a retransmission timer and build a correct cancellation of it as well
*** DONE Handle the all_acked case in the retransmission timer as well.
    We are currently not handling this case correctly and we should.
** DONE Install the retransmissions code.
   Increase the timeout by two every time the retransmission timer ticks.
** DONE Write code for retransmitting the oldest frame
   With this, we gamble we only lost a single frame in the stream,
   though this is probably not going to be true in the general case
* DONE There is a bug when creating multiple connections, fix
  The second created connection seem to stall, and I wonder why. This
  should be investigated as the fix is needed to make the code work
  anyway!

  This error is interesting:

  ** exception error: no match of right hand side value 
                    {error,{already_started,<0.60.0>}}
     in function  gen_utp:connect/3
     in call from utp:test_connector_1/0
* DONE The ACK in the connectee@ is seen as old, investigate
  There is something along the lines of the numbering that doesn't
  work here. It ought to be fixed. But we place it down here to
  concentrate on other stuff first.

  The problem is that we find an ACK and that ACK is older than what
  we expect it to be. This is wrong, and we should fix it. We should
  get an ACK which is equivalent to the last acked packet. I.e., it
  should be equivalent to a window probe request. It is off-by-one and
  sometimes it is off by two (??).
* DONE ZeroWindow Timeouts
** DONE Move the Zerowindow check out of handle-packet. It has no place in there
** DONE Install and remove the zerowindow timeout
   When the window closes to 0, we should start the zerowindow
   timer. If nothing has happened for some time, we will then send out
   a window probe to coax the other end into sending back an ACK with
   an updated window.
*** DONE Installation
   When the window closes to 0, we should install the timer.
*** DONE UnInstallation
   If there is already a timer installed, remove it when the window
   opens above 0.
** DONE Figure out the exact construction of the window probe packet
   We don't know exactly what the probe packet looks like. We better
   read the source code of libutp to see what it looks like.

   There is no window probe packet. One simply bumps the window size
   >.< ... that is a majorly bad idea, but what the protocol does.
*** DONE Timer triggering
   If this timer triggers, it means we should send forth a
   window-probe packet. This is a packet which will trigger an ACK the
   other way.

   No, it means: Increase the window by one and then try to fill up
   the buffer if possible again!
* DONE SYN Timeouts should just be part of retransmit timeouts?
  Yep, they should.
** DONE Read the libutp source and figure out the normal retransmit time for SYNs
   The normal retransmit time is two tries: one at 3 secs, one at 6
   secs and then at 12, we give up. OK. That should be easy to implement.
** DONE Set up the retransmit timer in uTP to match this.
** DONE Keep trying and fail if it takes too long upon timer triggers.
** DONE Ignore the special cases a bit for now.
* DONE Socket Close
  How to implement socket closedown?

  Basic socket closedown is done. We have pushed the problem to other
  states now!
** DONE Make a plan and understand what is going on!
   It is based on the idea of FIN packets. Does it allow half-open
   connections?

   The plan is to figure out some general things, and then attack each
   possible state transition one by one. It begs some general
   questions, which we can probably answer by digging into the code.
** DONE Does uTP allow for half-open connections?
   Investigate the source code of libutp to figure this out!

   No! uTP has no concept of half-open connections!
** DONE How is the two-army problem handled?
   By timeouts, we know that.
** DONE Individual states:
   A transition happens on a given state with a given input.

   For each of these state transitions, understand specifically what
   happens in the transition and make a plan for it.

   Handle them by implementing what we think is the bare minimum and
   then build on from there!
** DONE 1: CONNECTED + close()
*** DONE Check the source of libutp
*** DONE We should send off a st_fin packet
*** DONE The st_fin packet should be entered in the retransmission buffer!
*** DONE We should transition to fin_sent in state.
** DONE 2: CONNECTED + pkt(st_fin)
    Mark where the end of the stream is
**** DONE What does libutp do?
     What happens when the incoming packet is of type st_fin?

     What happens to all who are awaiting transfer of data when the
     buffer closes.
**** DONE When the buffer closes, we should stop satisfying data to the upper layer
     According to spec, this is what should happen. So if we close the
     line in the send direction, we are also closing the line in the
     receive direction. In other words, we don't use the concept of
     half-open connections.
**** DONE When receiving a FIN packet, install a knowledge of this in the pkt_buffer
     We should record that we got a fin packet, and what seq_no is
     stamped with the fin.
**** DONE Set a Message which says we got the fin packet.
**** DONE Make sure we don't send data to the upper layer when a fin has been sent!
**** DONE Should the ST_FIN packet go to the retransmit buffer?
     Yes, make it so!

     It is written like any other packet, eventually of size 0 but is
     present in the reorder buffer so it will be transmitted safely
     eventually. It is not simply an ACK for state updates.
** DONE Implement the FIN_SENT state properly
*** DONE Refactor out pkt receives from the other end from connected
    We need this code present in the fin_sent state as well, so factor
    it out such that we can use it here as well.
*** DONE Implement the altered state on how to handle the next state in this.
** DONE How do we leave FIN_SENT?
     We leave FIN_SENT as soon as we either timeout, or if we get acks
     back up to the FIN_PACKET. In this case, we move to the DESTROY
     state.
*** DONE Detect that the ST_FIN packet was acked by the last ACK
** DONE Figure out exactly what happens when an ST_FIN packet is received
     There are two points in time. When we get the packet in, and when
     we ACK it because we reach it in the reorder buffer. Which should
     force the state change to the GOT_FIN state? Look in the libutp
     code.

     When we *CONFIRM* the eof_pkt by ACK'ing in our end, we move the
     the GOT_FIN state.

     When we *SEE* the packet, we track that we have seen a finalizer
     packet, but we don't do any state updates and stay in the
     CONNECTED state in this case.
** DONE When we confirm the eof_pkt from the reorder buffer, we should post a message this is the case
     The reason we should post this to the worker process is such that
     it can alter the state to a new one. Otherwise we will entangle
     different parts to each other.
** DONE When we confirm the FIN packet, our new state is GOT_FIN *unless* FIN_SENT is our current one
     This is because in the FIN_SENT state we are just about to close
     down anyway, so there is no reason to move to GOT_FIN.
** DONE If we are in FIN_SENT and we *Confirm* an ACK, move to FIN_SENT
   Done. This is automatically fixed in our code since the path is
   split correctly. We don't need to handle this case at all!
** DONE In States which are not CONNECTED, nor FIN_SENT we can't accept new data.
*** DONE If we know the eof_pkt and receive packets past it, throw them out!
     We can simply enter them in the reorder buffer and soundly ignore them.
*** DONE 3: SYN_SENT + close()
    Set timeout to the minimum of 60 and the conn rto * 2
*** DONE 4: GOT_FIN + close()
    Move to DESTROY_DELAY
*** DONE 5: ALL_OTHER_STATES + close()
    Move to DESTROY!
*** TODO DESTROY
    Destroy should clean up stuff. What stuff should it clean up, and
    how?

    We should report back to clients waiting on the socket for data
    that this won't happen.
* DONE FIN_SENT and timeout
** DONE What should be done here?
   I am pretty sure we should be moving to another state, but I am not
   which state we should move to. Investigate the libutp C++ code.

   Easy: Increase RTO. If new RTO is above threshold (30 secs) then
   move to DESTROY as a state.
* DONE GOT_FIN and timeout
** DONE What should be done here?
   This is yet another of those questions we want to answer. How do we
   get *away* from the GOT_FIN state?

   We should move to the state CS_RESET
* DONE DESTROY_DELAY and timeout()
  Move to CS_DESTROY!
* DONE FIN_SENT and send()
* DONE FIN_SENT and recv()
* DONE 3: GOT_FIN how do we react on a GOT_FIN?
*** DONE GOT_FIN || DESTROY_DELAY + timeout() ?
     The rule here is that we should go to DESTROY (for DESTROY_DELAY)
     And we should go to RESET (for GOT_FIN).
     We must tell callers that we have an ECONNRESET as well.
*** DONE GOT_FIN + recv() --> error, can't*
    ECONNRESET?
*** DONE GOT_FIN + send() --> error, can't
* DONE CS_RESET state
  This is another question-mark. What should we do in the CS_RESET
  state? We Better read the source of libutp.

  Hmm, there is nothing to do in this state. Essentially, we should
  just move to the DESTROY state right away. It is rather odd that
  this state exists. It may have been an old fluke from the early days
  of the protocol. I am willing to just destroy the line instead.
** DONE Use the RESET state to confirm a close.
   In this state, we just deny everyone everything until we get a
   close() on the socket at which point we move to the DESTROY state.
* DONE DESTROY how do we react on a DESTROY?
    Set a timeout
    When the timeout trigger, we remove everything on this socket by
    closing down. We do however tell back to parents waiting that the
    socket is going to be destroyed.

    That is essentially all!
** DONE Write code which can walk through the senders and receivers and send them messages
   This means we can send out messages to all clients who are waiting
   on us to do something. We can call this either from the DESTROY
   state as a safeguard, or we can call it earlier if some states
   requires us to exit out earlier with other kinds of information. It
   also allows us to handle the ETIMEDOUT error correctly, I guess.
* DONE RESET packets
  We currently have no handling of RESET packets at all. It ought to
  be pretty simple though and can be added easily I think.
** DONE ST_RESET Packet in the receive direction
   We receive an ST_RESET packet for a connection. This means we
   should stop processing and die. The rule is that in a FIN_SENT
   state we should move to DESTROY. In other states we should move to
   RESET. The error message to return up is based on whether or not we
   are in SYN_SENT. In SYN_SENT, it is ECONNREFUSED. Otherwise it is
   ECONNRESET!
*** DONE Add the ability to handle a reset() call for a given socket.
    In this state, we should carry out the things we have written down
    above.
** DONE ST_RESET Packet in the send direction
   This happens on a failed lookup. There is no such socket present,
   so when we try to look up the socket, we fail. This means we send
   off an RST packet, but store a "Do not send off another RST Packet
   for this unless a grace time has happened" entry in the lookup
   table.
*** DONE Write code for the transmission of a RESET packet
*** DONE Install on a failed lookup
* DONE Assert all messaging goes through OK
  This is really a bit hacky, but I'd rather assert that all the UDP
  packets are released correctly to the underlying operating system
  for now. If not, we ought to handle it explicitly anyway.

* DONE Fix the "ACK-is-old" bug.
  When we get in packets, the ACK is classified as an old ACK. This is
  an error somewhere in the code and should be fixed.

  The ACK is old because we send back an ACK which is too low in value
  compared to what the receiver expects.

  1: Is the receiver the connector or the connected?
     * It is the connectee, so the connector is the one sending old
       acks, or the connectee has the wrong ACK number.
  2: What code is the code that sends off the ACK?
     * The ACK sent is OK. It just ACKs for the last acked packet.
  3: Where does the ACK stem from? From the initial connect setup
     code?
     * Fixed
  4: Why is it off-by-two or off-by-one?
     * The initialization was wrong and than was a count of 1
  5: Is this an error w.r.t. that the ACK is the next expected ACK
     * Doesn't look like it
  6: I think the culprit is the code that updates the send buffer. It
     calculates the window incorrectly and thus it fails.


  The problem is actually quite simple. The ACK was determined as old
  because the sequence number is the next expected sequence number
  there is. We use a number one too high. This is the second
  off-by-one bug, so we are now down to 0 off-by-x bugs in the code.
* DONE Store a triple, {ConnID, Address, Port}, for a connection.
  This is far more robust in the long run as we can then reuse
  connection IDs for other {Addr, Port} pairs.

* DONE Backwards data test
  Open a connection and move data "backwards"
* DONE Full-duplex test
  Test data transfer in full duplex over the line
* DONE Test close() of sockets
  Test that a socket can be closed down again. Currently the code is
  there but it has no coverage.
** DONE Test close() for the connector
** DONE Test close() for the connectee
** DONE Test close() after data has moved over the line
** DONE Test close() after data has moved in full-duplex manner
* DONE Robustness falters under heavy packet loss.
  When the packet loss is very heavy, the robustness of the system is
  worse than it normally is. We ought to investigate why this is the
  case and fix it.

  My guess is we lost a packet we can't afford to loose at the moment. To
  fix this, we must know where the "I-give-up" occurs so we can
  attempt to diagnose what packet created the problem and fix it.

** DONE Some of these bugs are due to ENOBUFS being sent by the kernel
   This can be fixed by actually handling it correctly in the layers
   of the worker process. We better look into fixing it.
* DONE Try the NetEm stuff in Linux as well. It may behave differently compared to FreeBSD
  NetEM is far more general in what it can do to a line, but I'll keep
  both around for completeness.

* DONE Handle ENOBUFS
  The best way to handle is either to just drop the packet in
  question, or wait a little bit of time and then try to resend. In
  any case, we can assume the packet is lost in a first try.
* DONE Try the code on FreeBSD as well
* DONE Read through the SYN/ACK phase of the libutp source
  We need to understand what the rules are here, before we can
  implement it correctly.

* DONE Re-read the uTP BEP 29 spec again

* DONE Fix the early got fin problem
  Ok, if packets get reordered and we get a FIN packet, then the
  problem is our FIN packet is somehow forcing us to move to a GOT_FIN
  state too quick. Hence, when the real packet comes in later, the
  state is wrong and we throw away the packet we are missing due to
  being in the GOT_FIN state. This is a problem that creates a large
  number of small problems.

  The fix is to investigate why we are tracking the got_fin too early
  in this case. For some reason it matches the next expected packet
  and then we have the problem where the real packet we are waiting
  for comes at a later point in time.

  ; One bug was found and fixed. If the fin packet was empty, we did
    not check that it was the expected packet right away. Hence when
    the st_fin tagged packet arrived, we simply moved to the got_fin
    state much too early.

  Another problem is that we may get the packet moving us from the
  syn_sent state into connected out of order. In other words, we begin
  seeing data packets before we see the progressing packet. This is
  rather fun and not really cool. How to fix?

  ; We don't need to fix this right away. The retransmit code will
    ensure we eventually get the data again even if it fails early
    on. As such, this is an optimization of the system.

  A Third problem is that the ACK packet signifying the opening of the
  connection may be lost. What should we do in that case?

  ; Nothing! Then the connection will time out and be
    gone. Unfortunate, but what must be done in a two-way handshake.

  Fourth problem: Retransmits! When going to the fin_sent state, we
  must still be able to carry out retransmissions as normal. Otherwise
  the retransmit timer will never be set on the connection and thus
  our code will fail to retransmit and hence fail to actually work.

  ; I have installed a retransmit handler when we close the session
    from the connected state. This should ensure that retransmits
    happen according to the plan and eliminate some bugs pertaining to
    this problem.
* DONE Why do we get "got_fin" very early on and then sit with that for a looong time?
  This looks like something that is currently wrong, but we survive in
  some way or the other. We ought to investigate that case!

  This was fixed. There was a bug where we got a fin packet in but
  forgot to check if it matched the next expected sequence
  number. Hence a fin packet would always complete and never enter the
  reorder buffer. This of course means errors all over the place.
* DONE closer_3 can timetrap_timeout
  45.000s	FAILED	{timetrap_timeout,{utp_SUITE,closer,72}}
  why can it timetrap_timeout? Does this have anything to do with the
  packet state as well?

  This was due to the got_fin bug: Entering it too early when we got a
  st_fin packet.
* DONE Fix this bug no_data_wrong_pkt_state:
=== location {utp_SUITE,connect_n_send_big,146}
=== reason = no match of right hand side value 
                 {badrpc,
                     {'EXIT',
                         {{error,no_data_wrong_pkt_state,
                              [{ty,st_data},
                               {conn_id,29189},
                               {win_sz,8192},
                               {seq_no,101},
                               {ack_no,825},
                               {extension,[]},
                               {payload,192}]},
                          {gen_fsm,sync_send_event,
                              [<12912.79.0>,{recv,112928},infinity]}}}}

  Actually, it is us who have been too protective. It is ok. What
  happens is we get a duplicate packet in and then it triggers this
  when the sequence number is placed right on top of the other, or is
  a duplicate packet.
* DONE Use the Linux NetEM packet mangler to test the system
  This is fairly important. It found some problems in the code base
  and we better have a look at what it is it found.
* DONE Add support for repeating the test cases
  A successful test requires more than a single run. To capture
  eventual nasty bugs, we better rerun tests a lot.
* DONE There is a bug where we have timeouts
  The gen_fsm times out when we try to connect and hence we get
  timetrap timeouts. The fix is to make the timeout occur much rarer
  and increase it by an insane amount, possibly infinity.

  Turns out there was a @todo in the code... :P
* DONE Keep trying to reconnect in the tests
  The default timeout is only 6 seconds and I deliberately run with
  extremely large buffers to mess up the system. Keep trying to
  reconnect until the timetrap hits.
* DONE Write code for a sanity checker
  When we have completed a connection, the gen_server which is the
  main entry point must be in a sane state:

  ; There should be no entries in the registry table
  ; All processes should have been closed down correctly
* DONE Fix the race around [{got_fin, true}, ...]
  There is a race in the code around the "got fin"
  state. Specifically, the system disallows a close of that socket
  correctly in a case we have and thus the system enters an infinite
  ACK-loop state in which we can't do anything. This ought to be
  fixed.

  The race was present in the fin_sent state upon a cross-close of the
  line.
* DONE What should we do when we are in fin_sent and get in an st_fin packet?
  We need to get this packet in, as we can be in need of ACK'ing it
  up. Right now throw them away, but that is probably a bad idea to
  do.

  The fix here is to handle the packet as we normally do with packets,
  so we may move from fin_sent, get a FIN packet and then move
  straight to the state of DESTROY if the ST_FIN packet can complete
  the connection.

  This is now handled. It is not the question of the incoming packet,
  which simply sets the fact that we have an st_fin packet in the
  reorder buffer. It is the {got_fin} message that afterwards comes
  which has to be handled. We do that now.
* DONE Fix the problem of sockets closing down
  When we close down a connection, we must remove it upon a close()
  call and not afterwards. Otherwise, we can't rely on the order in
  which things happens. The rule is that after a close(), the socket
  should not be available and packets should not be forwarded to it.

  Or we should rethink the design and the rules for when you get
  removed from the ETS/Monitor lists. Really, it hinges on the fact of
  what happens as soon as you get a close() and what operations there
  should be done.

  This requires some deep thinking. Otherwise we may actually do the
  wrong thing here.

  This is really not a problem, I realized.
* DONE The syn_queue can grow full
  There is a bug in the acceptor code so we end up with the wrong
  session being accepted by the syn queue. Hence this connection is
  never established and so we get a skew:

  A wants to SYN
    to            B
  ---- B fails ----
  A wants to SYN
     goes to q on B
  A wants to SYN
     goes to q on B
  ...
  --- New test ----
  A wants to SYN
                  B picks up old SYN in q
  A wants to SYN
  --- Nothing happens ---

  The problem is that I think we are tracking the registry entries
  incorrectly. What ensures that we get a duplicate syn packet to an already
  created connection? Is it the conn_id_recv or conn_id_send we
  register in the registry and what is the right thing to push in
  there?

  Fixed. Duplicate SYN packets must be forwarded correctly and they
  are now.
* DONE Dialyzer fixes:
==> utp (dialyze)
gen_utp_worker.erl:593: Function satisfy_buffer/4 will never be called
gen_utp_worker.erl:610: The pattern {'ok', {'receiver', From, Length, Res}, N_Processes} can never match the type 'empty'
gen_utp_worker.erl:723: The pattern {'rb_drained', PR1, PB1} can never match the type {'ok',utp_process:t(),'undefined' | {'pkt_buf',queue(),[any()],[any()],integer(),char(),char(),'none' | {_,_},integer(),integer(),integer()}}
utp_process.erl:69: Record construction #proc_info{receiver_q::'undefined' | queue(),sender_q::{maybe_improper_list(),_}} violates the declared type of field sender_q::'undefined' | queue()
* DONE TEST RUNS
     1. OK 7/0
     2. FAIL 6/1
     3. FAIL 2/5
     4. OK
     5. OK o.O
     6. FAIL 6/1
* DONE Why don't we return {ok, Sock} | {error, Reason} on connect?
  This seem to overlook something important on our end.
* DONE close_2 2-way handshake "bug" in the test case
  Ok, there is a funny bug with the two way handshake:

  First, we send off a SYN

  A > SYN > B

  Then, B immediately closes the connection.

  A < ACK < B
  A < FIN < B

  Reordering now happens, so

  A < FIN -- thrown out because we are in the syn_sent state.
  A < ACK -- OK, WE HAVE A CONNECTION!!!!

  A > DATA > B -- Succeeds!, we have a connection!
  A < FIN -- *NOW* we get the FIN! so we begin closing down the line

  The bug is in the test, not in the code! The fix is to make the test
  code robust for this happening.

* DONE Test the retransmission code
** DONE Make DUMMYNET work on FreeBSD
** DONE Test the code on FreeBSD again!
** DONE Create a script with a low-level error rate.
** DONE TEST with a low-level error rate.
** DONE Create a script with a medium level error rate.
** DONE Create a script that totally fucks up the connection ordering.
** DONE Create a script which does everything in a nasty way.
** DONE Create a script which is close to realistic.
* DONE Fix the "fin_sent" gets SYN packet bug
  This bug is new due to us fixing another bug. It is pretty easy,
  just throw it away.
* DONE Make the test spec specific to uTP
  Currently, I override the etorrent_test spec, but we ought to run a
  separate test for etorrent.
* DONE Find and remove dialyzer missing types
  The dialyzer reports some missing types. Fix this.
* DONE Retransmission of the syn packet seems to fail for some reason.
  Investigate why this is the case and fix it.

  We detect we should retransmit the SYN packet. Do we actually
  retransmit the packet proper? Yes we do!

  Is the problem in the receiving end then? Perhaps! We may be in a
  state where we have sent the SYN packet, and the first ACK-packet is
  not transferred back. It should be retransmitted and the system
  should detect this is the case! But I am fairly sure there is no
  code in place which ensures this is the case.

  This has been solved. The problem is that a SYN evades the registry
  by having another ConnID number in it. So the SYN packets that got
  resent was not sent to the right process and he then never does
  anything with them. If the ACK packet is lost then, we get another
  SYN which will force another ACK that will set up the
  connection. But this didn't work initially.
* DONE If we already have a connection worker, forward new SYN packets to it
  This way, the worker process is responsible for doing the right
  thing in the case a duplicate SYN comes in, and handle it
  accordingly. I think this is a better design choice than the one we
  have now.
* DONE Code refactoring: Error logging should be tunable
  Make it such that error logging is a tunable and not an always on
  thing as now.
* DONE TEST CASE: Piggyback test
* TODO TEST CASE: Test the wrap-around
  The 16bit wrap-around counter has to be tested somehow.
  One way is to do a backwards test. We send about 100 packets, so we
  have a 65536/100 = 665.35 to one chance of hitting it. That is, we
  will hit it in one out of 3 test runs, approximately...
* DONE TEST CASE: Receive window test
  In this test, we must wait until we actually fetch data to test what
  happens when the receive window is full in one end. We basically
  wait 5-10 seconds before we begin the receive. And we only receive a
  bit at a time to be even more nasty.
* TODO Consider moving the window-specific code to its own module.
  The window-code will grow rather big so refactor it to its own
  module
* TODO Looks like resets are sent to the wrong place
  If we get in a wrong packet, to where should the RESET be sent in
  order to hit right in the other end?

** TODO What is utp.cpp doing here?
** TODO Do the same thing as utp.cpp :)
* TODO Consider timeouts in all states.
  We need to make sure there is a timeout exit for all connection
  states. This is not currently guaranteed.
* TODO Force an st_state packet through when the window *reopens*
  If we have a window that is down to 0, and we then suddenly get a
  receiver on the socket reading data out of it such that we detect
  the window open up again, we should always send a window update
  packet in this case.

  It will make the other end trip the zerowin-timer rarely and I don't
  like the way the zero win timer is resolved.
* ACK piggybacking
  ACK piggybacking is the concept where we under a send check if we
  sent a packet. If this is the case, we effectively have a piggy-back
  and can drop sending out a separate ACK. It is easily detected in
  the code base and then handled explicitly.
* RTT Measurement
  This is probably different in uTP from the standard protocol

  It is, because we have an explicit RTT-timer inside the packet. This
  is fairly important to get right, but it requires us to investigate
  a lot on the reference code to understand what is going on. It is
  the major important part of this weeks work.
* Congestion window code
  Hinges on RTT Measurement
* Implement Delayed ACKs
  Fairly easily done. You simply count how many bytes we have ACKed
  since last and set a timer. Whenever the timer triggers, or we go
  above the ACKED_BYTES threshold, we send out an ACK. Piggybacking
  will reset this if it happens.
** Delayed ACKS - Make sure we immediately ack the FIN packet. Don't delay him!
  Easy right now, but keep this as it is important when you
  introduce delayed ACKs.

  In a delayed ACK world, we ought to do something about the FIN
  packet and ACK it right away. Otherwise it will wait until the delay
  trigger is tripped and that will take some time.

* SACK support
  SACK support has two directions
** SACK in the send direction
*** When should we send out an SACK?
    My guess is this hinges on the size of the reorder buffer. If it
    is too big, we can SACK it.
*** How do we generate an SACK
    The important part is padding up to the last bytes. How is padding
    handled. How do we actually do this?
** SACK in the receive direction
   When we receive an SACK, we should go through our send-buffer and
   weed out stuff the other end already have. Then we should decide
   what to retransmit and how. We probably shouldn't just "retransmit
   the oldest packet" as we do now though.
* Nagle code
  Nagling is fairly easy to do. When there is less than a packet to
  send out, we simply say: "No, won't send" and set a nagle timer. If
  the timer is tripped, we force sending of everything. Otherwise we
  wait for more data until we have a full packet to send. It means we
  need to be able to taste/peek on the send buffer to see if there is
  enough data on it to be able to send out a full packet.

  NAGLING MUST BE IMPLEMENTED AFTER THE CONGESTION WINDOW CODE
* Look at the coverage output:
  What things are we not testing currently?
* Let the SYN-packet use the normal retransmission queue
  First mistake on our part: SYN packets should go to the outgoing
  queue and be handled as resends. We currently fake-retransmit it,
  but it looks easier to simpler use the same queueing facility of the
  other end.
* TODO Add a safety timer on RESET Packets
  We currently just RESET on anything, but we should probably include
  some kind of protection and blackhole the other end for a while if
  we reset packets toward him above a certain level. This is fairly
  easily implemented later on though.
* TODO There are some states that can't cope with a RESET yet
  But it doesn't matter at the moment. I'd rather look into other
  errors first and get those away first. Then we can look into this
  which should be fairly automated to add later on.
* DONE We sometimes hit {error, enobufs}
  On the FreeBSD machine. Investigate and handle this kind of error
  message.

  We can only handle this while on the FreeBSD machine and when we
  know where it occurs. We should probably regard such a packet as
  lost rather than try again later on. It only happens when we have
  enabled active queue management of some kind, notably RED or a
  DUMMYNET pipe.

  We assume the fix is to regard the packet as lost forever.

* TODO Only install the zerowin timer if there are more data to send out
  We are currently always setting the ZeroWindow timer when the
  peer_advertised_window is 0, but we could postpone that decision
  until we know we need to send data to the other end.

  Actually it may clear itself up, or so we hope.

  This is most clever to postpone as it has no direct effect on the
  code base currently. It is a "Nice-to-have" thing rather than a
  "DO-NEED!" thing.
* TODO When in syn_sent and getting packets out of order, reorder them!
  This is a problem we can ignore in principle until we have other
  parts of the system up and running. Retransmission will ensure we
  eventually get them in.
** TODO Read libutp source code on out-of-order packets in syn_sent
  It is not obvious what to do:

  There are so many loose holes in this so we better fix them. How do
  we want to handle initial ACK's and stuff?

  The best thing is to read through the code of libutp and figure out
  what they have decided to do.

  Essentially, this is the question that says: Should we allow for
  false starts or shouldn't we allow for false starts? Is libutp
  accepting false starts? We could just buffer up incoming packets
  temporarily and then feed them to ourselves when we go to the
  connected state.

* TODO Handle ENOBUFS in packet initialization:
   {{badmatch,{error,enobufs}},
    [{utp_pkt,send_packet,4},
     {lists,foldl,3},
     {utp_pkt,fill_window,4},
     {gen_utp_worker,fill_window,5},
     {gen_utp_worker,connected,3},
     {gen_fsm,handle_msg,7},
     {proc_lib,init_p_do_apply,3}]}

   The error is currently benign though as Erlang makes us survive.

   If we *know* a buffer is full, we ought to handle it right away by
   doing the right thing(tm).
* The ConnId lookup table should guard against generating an already existing random number.
  This is fairly simple. When generating a new ConnID, look up if we
  already have one.
* Grace period on used ConnIDs?
  When we have used a ConnID for a while, should we accept another one
  straight after? It sounds like a bad idea because it may time out
  for some reason. 

  On the other hand the conn_id/ip pair makes sure we are not
  expecting data from this guy in any other way. Someone with another
  ID would not be able to send to the socket unless he had the same IP
  address then. It makes the collisions much less likely to occur in
  the implementation to use this. In fact, it is 1/2**32. Rather good,
  and not at all realistic for a match.

  This is probably not needed if we triple the ConnID over the IP/Port
  pairs.
* TODO Stop stray async_messages on packet types we know how to handle
  There are some async messages that comes out of the system. We know
  how they should be handled, so we can handle them in the code and
  ignore them.
* Consider proper for testing.
